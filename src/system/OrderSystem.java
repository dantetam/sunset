package system;

import java.util.ArrayList;

import data.Data;
import entity.Entity;
import entity.Item;
import entity.LivingEntity;
import entity.Resource;
import game.Order;
import level.Grid;
import level.Tile;
import sunset.Game;

//Handles and executes orders generated by entities

public class OrderSystem extends BaseSystem {

	public OrderSystem(Game g) {super(g);}

	public void tick() 
	{
		Grid grid = main.grid();
		for (int i = 0; i < grid.entities.size(); i++)
		{
			Entity en = grid.entities.get(i);
			if (en instanceof LivingEntity)
			{
				LivingEntity person = (LivingEntity)en;
				/*for (int j = 0; j < person.queue.size(); j++)
				{
					//main.println("j: " + j + "/" + n);
					//main.println(t.occupants.size());
					Order o = person.queue.get(j);
					executeOrder(grid, person, o);
					if (o.destroy)
					t.occupants.get(i).queue.remove(o);
				}*/
				if (person.queue.size() > 0)
				{
					Order o = person.queue.get(0);
					executeOrder(grid, person, o);
					if (o.frames == 0) person.queue.remove(o);
				}
			}
		}
	}

	public void executeOrder(Grid grid, LivingEntity person, Order order)
	{
		if (order.frames != -1 || order.frames != 0)
			order.frames--;
		if (order.type.equals("moveNearestTree"))
		{
			//ArrayList<Tile> adj = grid.adjacent(person.location().r, person.location().c);
			Tile tree = grid.nearestResource(person.location().r, person.location().c, 1);
			if (tree != null)
			{
				ArrayList<Tile> path = main.path.findAdjustedPath(person.location().r, person.location().c, tree.r, tree.c);
				if (path == null) return;
				for (int i = 0; i < path.size() - 1; i++)
				{
					Order o = new Order("move", 40);
					o.data.add(path.get(i).r - path.get(i+1).r);
					o.data.add(path.get(i).c - path.get(i+1).c);
					//System.out.println((path.get(i+1).r - path.get(i).r) + " " + (path.get(i+1).c - path.get(i).c));
					person.queue.add(o);
				}
				Order o = new Order("harvest", -1);
				o.data.add(tree.r); o.data.add(tree.c);
				person.queue.add(o);
			}
			order.frames = 0;
		}
		else if (order.type.equals("move"))
		{
			person.spriteX += order.data.get(0).doubleValue()/40D;
			person.spriteY += order.data.get(1).doubleValue()/40D;
			//main.println(order.data.get(0).doubleValue()/40D);
			if (order.frames == 0)
			{
				//System.out.println("moving");
				Tile t = grid.getTile(person.location().r + (int)order.data.get(0), person.location().c + (int)order.data.get(1));
				person.move(t);
			}
		}
		else if (order.type.equals("harvest"))
		{
			Entity en = grid.getTile(order.data.get(0).intValue(), order.data.get(1).intValue()).item;
			if (en instanceof Resource)
			{
				Resource res = (Resource)en;
				res.life -= 5;
				if (res.life <= 0)
				{
					res.remove();
					order.frames = 0;
				}
			}
		}
	}

}
